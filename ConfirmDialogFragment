package com.panasonic.smart.eolia.common.view.dialog;

import android.app.Dialog;
import android.app.DialogFragment;
import android.content.DialogInterface;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.panasonic.smart.eolia.R;
import com.panasonic.smart.eolia.common.util.StringUtil;


public class ConfirmDialogFragment extends DialogFragment {

    public static final String KEY_CONTENT_STRING = "KEY_CONTENT_STRING";
    public static final String KEY_CANCEL_STRING = "KEY_CANCEL_STRING";
    public static final String KEY_OK_STRING = "KEY_OK_STRING";
    public static final String KEY_TYPE = "TYPE_TYPE";
    public static final String TYPE_DOUBLE = "1";
    public static final String TYPE_SINGLE = "2";
    View view;
    OnConfirmListener confirmListener;
    String type;
    String okString;
    String cancelString;
    Button btOK;
    public void setTitleString(String titleString) {
        this.titleString = titleString;
    }

    public void setButtonText(String buttonText) {
        if (btOK != null) {
            btOK.setText(buttonText);
        }
    }

    String contentString;
    String titleString;
    private int windowHeight;
    private boolean isConfirmLeft = true;

    public void setWindowHeight(int windowHeight) {
        this.windowHeight = windowHeight;
    }
    public void setConfirmLeft(boolean confirmLeft) {
        isConfirmLeft = confirmLeft;
    }

    public interface OnConfirmListener {
        void onClick(Dialog dialog);

        void onBack(boolean isDismiss);
    }

    public static ConfirmDialogFragment newInstanceSingleButton(String confirmText, String content, OnConfirmListener listener) {
        Bundle bundle = new Bundle();
        bundle.putString(ConfirmDialogFragment.KEY_TYPE, ConfirmDialogFragment.TYPE_SINGLE);
        bundle.putString(ConfirmDialogFragment.KEY_OK_STRING, confirmText);
        bundle.putString(ConfirmDialogFragment.KEY_CONTENT_STRING, content);
        ConfirmDialogFragment confirmDialogFragment = new ConfirmDialogFragment();
        confirmDialogFragment.setArguments(bundle);
        confirmDialogFragment.setOnDialogConfirmListener(listener);
        return confirmDialogFragment;

    }

    public static ConfirmDialogFragment newInstanceDoubleButton(String confirmText, String cancelString, String content, OnConfirmListener listener) {
        Bundle bundle = new Bundle();
        bundle.putString(ConfirmDialogFragment.KEY_TYPE, ConfirmDialogFragment.TYPE_DOUBLE);
        bundle.putString(ConfirmDialogFragment.KEY_OK_STRING, confirmText);
        bundle.putString(ConfirmDialogFragment.KEY_CANCEL_STRING, cancelString);
        bundle.putString(ConfirmDialogFragment.KEY_CONTENT_STRING, content);
        ConfirmDialogFragment confirmDialogFragment = new ConfirmDialogFragment();
        confirmDialogFragment.setArguments(bundle);
        confirmDialogFragment.setOnDialogConfirmListener(listener);
        return confirmDialogFragment;

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        getDialog().requestWindowFeature(Window.FEATURE_NO_TITLE);
        getDialog().setCanceledOnTouchOutside(false);
        getDialog().getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        if (view == null) {
            view = inflater.inflate(R.layout.dialog_confirm, container, false);
        }
        //防止点击能穿透
        view.setClickable(true);
        Button btCancel = (Button) view.findViewById(R.id.btCancel);
        btOK = (Button) view.findViewById(R.id.btOK);
        Button btOKSingle = (Button) view.findViewById(R.id.btOK_single);
        TextView textview = (TextView) view.findViewById(R.id.textview);
        TextView tvTitle = (TextView) view.findViewById(R.id.tvTitle);
        RelativeLayout all = (RelativeLayout) view.findViewById(R.id.rl_all);


        ViewGroup.LayoutParams layoutParams = all.getLayoutParams();

        if (windowHeight != 0) {
            layoutParams.height = windowHeight;
        }

        RelativeLayout relativesingle = (RelativeLayout) view.findViewById(R.id.lenear_single);
        RelativeLayout relative = (RelativeLayout) view.findViewById(R.id.lenear);
        Bundle bundle = getArguments();
        type = bundle.getString(KEY_TYPE);
        contentString = bundle.getString(KEY_CONTENT_STRING, "");
        okString = bundle.getString(KEY_OK_STRING, "OK");
        cancelString = bundle.getString(KEY_CANCEL_STRING, "Cancel");

        if (StringUtil.isNotEmpty(titleString)) {
            tvTitle.setVisibility(View.VISIBLE);
            tvTitle.setText(titleString);
        } else {
            tvTitle.setVisibility(View.GONE);
        }
        switch (type) {
            case TYPE_SINGLE:
                relativesingle.setVisibility(View.VISIBLE);
                relative.setVisibility(View.GONE);
                break;
            case TYPE_DOUBLE:
                relativesingle.setVisibility(View.GONE);
                relative.setVisibility(View.VISIBLE);
                break;
        }
        textview.setText(contentString);
        btCancel.setText(cancelString);
        btOK.setText(okString);
        btOKSingle.setText(okString);
        btCancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (confirmListener != null) {
                    if (isConfirmLeft) {
                        confirmListener.onBack(false);
                    } else {
                        confirmListener.onClick(getDialog());
                    }
                }
                dismiss();
            }
        });
        btOKSingle.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (confirmListener != null) {
                    confirmListener.onClick(getDialog());

                }
                dismiss();
            }
        });
        btOK.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (confirmListener != null) {
                    if (isConfirmLeft) {
                        confirmListener.onClick(getDialog());
                    } else {
                        confirmListener.onBack(false);
                    }
                }
                dismiss();

            }
        });
        return view;
    }

    public void setOnDialogConfirmListener(OnConfirmListener confirmListener) {
        this.confirmListener = confirmListener;
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
    }

    @Override
    public void onPause() {
        super.onPause();
    }

    public void onResume() {
        super.onResume();
        getFocus();
    }


    @Override
    public void onStart() {
        super.onStart();
        Window window = getDialog().getWindow();
        WindowManager.LayoutParams windowParams = window.getAttributes();
        windowParams.dimAmount = 0.3f;
        window.setAttributes(windowParams);
    }

    @Override
    public void onDismiss(DialogInterface dialog) {
        super.onDismiss(dialog);
        if (confirmListener != null) {
            confirmListener.onBack(true);
        }
    }

    /**
     * 画面のフォーカスを設定する。
     */
    private void getFocus() {
        getView().setFocusableInTouchMode(true);
        getView().requestFocus();
        getView().setOnKeyListener(new View.OnKeyListener() {
            @Override
            public boolean onKey(View v, int keyCode, KeyEvent event) {
                if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_BACK) {
                    // 监听到返回按钮点击事件
                    dismiss();
                    return true;
                }
                return false;
            }
        });
    }
}
